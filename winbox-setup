#! /bin/bash
# Winbox Installer
# What this script does:
#   1. Downloading wine, wget and unzip, if not installed on the system
#   2. Downloading winbox from Mikrotik's download page
#   3. Copying winbox to /usr/local/bin/ directory
#   4. Copying icons to /usr/share/icons/hicolor/*/apps
#   5. Creating launcher for Winbox
#
# Written by Mohammad Riza Nurtam <muhammadriza@gmail.com>
# version=0.3
# winbox_version=3.11

# Print error messages and defining error status with non-zero value
errMsg() {
  echo "USAGE:
To install
sudo bash winbox-setup install

To remove
sudo bash winbox-setup remove"
  exit 1
}

# Installing dependencies
depInst() {
  DISTRIBUTION=`sed "/^ID/s/ID=//gp" -n /etc/os-release`
  echo -n "Wine is not installed. Installing wine and dependencies..."
  case $DISTRIBUTION in
    'fedora' | '"rhel"' | '"centos"' | '"IGN"' )
      dnf -q -y install wine wget curl > /dev/null 2>&1 || yum -q -y install wine wget curl > /dev/null 2>&1
      echo "DONE"
    ;;
    'ubuntu' | 'debian' | '"elementary"' | 'zorin' | 'linuxmint' | 'kali' )
      if [ -f /etc/os-release ]
      then
        source /etc/os-release
      fi

      if [ $(echo $VERSION_ID | awk '{printf "%1.0f",$1}') -ge 18 ]
      then
        WINEPKG="wine-stable"
      else
        WINEPKG="wine"
      fi
      apt-get -q -y install $WINEPKG wget curl > /dev/null 2>&1
      echo "DONE"
    ;;
    'arch' )
      sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
      pacman -Sy
      pacman -Sq --noconfirm wine wget curl > /dev/null 2>&1
      echo "DONE"
    ;;
    *)
      echo "FAILED"
      exit 1
    ;;
  esac
}

# Downloading latest version of Winbox from Mikrotik's website.
# The URL of the file is parsed from https://mikrotik.com/download
wbDl() {

  if [[ -f winbox.exe ]]
  then
    echo "Using previously downloaded winbox.exe"
  else
    echo -n "Downloading Winbox..."
    wget -q -c -O winbox.exe https://mt.lv/winbox
    if [ $? -ne 0 ]
    then
      echo "FAILED"
      exit 1
    else
      echo "DONE"
    fi
  fi
}

filesCp() {
  echo -n "Copying files..."
  if [[ !$(mkdir -p /usr/local/bin) ]]
  then
    if [[ !$(cp -f winbox.exe /usr/local/bin/winbox.exe) ]]
    then
    	cp -f winbox.sh /usr/local/bin/winbox.sh
    	chmod a+x /usr/local/bin/winbox.sh
	    chmod a+x /usr/local/bin/winbox.exe
	    for size in $( ls -1 icons/winbox-*.png | cut -d\- -f2 | cut -d\. -f1 | paste -sd ' ') ; do
		    mkdir -p /usr/share/icons/hicolor/${size}/apps/
		    cp -f icons/winbox-${size}.png /usr/share/icons/hicolor/${size}/apps/winbox.png
	    done
      echo "DONE"
    else
      echo "FAILED"
      exit 1
    fi
  else
    echo "FAILED"
    exit 1
  fi
}

lncCrt() {
  echo -n "Creating application launcher..."
  if touch /usr/share/applications/winbox.desktop
  then
    echo "[Desktop Entry]" > /usr/share/applications/winbox.desktop
    echo "Name=Winbox" >> /usr/share/applications/winbox.desktop
    echo "GenericName=Configuration tool for RouterOS" >> /usr/share/applications/winbox.desktop
    echo "Comment=Configuration tool for RouterOS" >> /usr/share/applications/winbox.desktop
    echo "Exec=/usr/local/bin/winbox.sh" >> /usr/share/applications/winbox.desktop
    echo "Icon=winbox" >> /usr/share/applications/winbox.desktop
    echo "Terminal=false" >> /usr/share/applications/winbox.desktop
    echo "Type=Application" >> /usr/share/applications/winbox.desktop
    echo "StartupNotify=true" >> /usr/share/applications/winbox.desktop
    echo "Categories=Network;RemoteAccess;" >> /usr/share/applications/winbox.desktop
    echo "Keywords=winbox;mikrotik;" >> /usr/share/applications/winbox.desktop
    xdg-desktop-menu forceupdate --mode system
    echo "DONE"
  else
    echo "FAILED"
    exit 1
  fi
}

filesRm() {
  echo -n "Removing launcher..."
  find /usr/share/applications/ -name "winbox.desktop" -delete
  echo "DONE"

  echo -n "Removing icons..."
  find /usr/share/icons -name "winbox.png" -delete
  echo "DONE"

  echo -n "Removing files..."
  rm -rf /usr/local/bin/winbox.exe
  rm -rf /usr/local/bin/winbox.sh
  echo "DONE"
}

if [ -z "$1" ]; then
  errMsg;
fi
case $1 in
  'install' )
    if [[ ! $(wine --version) ]]
    then
        depInst
    fi
    if wbDl
    then
      if filesCp
      then
        lncCrt
      else
        echo "FAILED"
        exit 1
      fi
    else
      echo "FAILED"
      exit 1
    fi
  ;;

  'remove' )
    filesRm
  ;;

  * )
    errMsg
  ;;
esac
